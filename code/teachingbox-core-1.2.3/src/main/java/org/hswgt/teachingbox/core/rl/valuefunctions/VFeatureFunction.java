
package org.hswgt.teachingbox.core.rl.valuefunctions;

import org.hswgt.teachingbox.core.rl.env.State;
import org.hswgt.teachingbox.core.rl.feature.FeatureFunction;
import org.hswgt.teachingbox.core.rl.feature.FeatureFunctionObserver;

import cern.colt.matrix.DoubleMatrix1D;
import cern.colt.matrix.impl.DenseDoubleMatrix1D;
import cern.colt.matrix.linalg.SeqBlas;

public class VFeatureFunction implements DifferentiableVFunction,
        LinearFunctionApproximator, FeatureFunctionObserver
{
    /**
     * Autogenerated serial version uid
     */
    private static final long serialVersionUID = -3752129768765408239L;
    
    /**
     * The FeatureModifier
     */
    protected FeatureFunction featureFunction;
    
    /**
     * The weight vector
     */
    protected DoubleMatrix1D weights;
    
    /**
     * Constructor
     * Takes a FeatureModifier that creates the feature vector
     * @param featureFunction The FeatureModifier
     */
    public VFeatureFunction(FeatureFunction featureFunction)
    {
        this.featureFunction = featureFunction;
        this.featureFunction.addObserver(this);
        this.weights = new DenseDoubleMatrix1D(featureFunction.getFeatureVectorSize());
    }
    
    /**
     * Copy Constructor
     * @param other The object to copy
     */
    public VFeatureFunction(VFeatureFunction other)
    {
        this.featureFunction = other.featureFunction.copy();
        this.weights = other.weights.copy();
        this.featureFunction.addObserver(this);
    }
    
    /* (non-Javadoc)
     * @see org.hswgt.teachingbox.valuefunctions.ValueFunction#getValue(org.hswgt.teachingbox.env.State)
     */
    public double getValue(State state)
    {        
        // this is a liner function approximation
        return getGradient(state).zDotProduct(weights);
    }



    /* (non-Javadoc)
     * @see org.hswgt.teachingbox.valuefunctions.ParameterizedFunction#getWeightVectorSize()
     */
    public int getWeightVectorSize()
    {
        return weights.size();
    }


    /* (non-Javadoc)
     * @see org.hswgt.teachingbox.valuefunctions.ParameterizedFunction#getWeights()
     */
    public DoubleMatrix1D getWeights()
    {
        return weights.copy();
    }


    /* (non-Javadoc)
     * @see org.hswgt.teachingbox.valuefunctions.ParameterizedFunction#setWeights(cern.colt.matrix.DoubleMatrix1D)
     */
    public void setWeights(DoubleMatrix1D newWeights)
    {
       this.weights = newWeights.copy();
    }



    /* (non-Javadoc)
     * @see org.hswgt.teachingbox.valuefunctions.ParameterizedFunction#updateWeights(cern.colt.matrix.DoubleMatrix1D)
     */
    public void updateWeights(DoubleMatrix1D delta)
    {
        SeqBlas.seqBlas.daxpy(1, delta, weights);
    }



    /* (non-Javadoc)
     * @see org.hswgt.teachingbox.valuefunctions.DifferentiableVFunction#getGradient(org.hswgt.teachingbox.env.State)
     */
    public DoubleMatrix1D getGradient(State state)
    {
        return featureFunction.getFeatures(state);
    }



    /* (non-Javadoc)
     * @see org.hswgt.teachingbox.valuefunctions.DifferentiableVFunction#getGradientSize()
     */
    public int getGradientSize()
    {
        return featureFunction.getFeatureVectorSize();
    }



    /* (non-Javadoc)
     * @see org.hswgt.teachingbox.valuefunctions.ParameterizedFunction#updateWeightsScaled(double, cern.colt.matrix.DoubleMatrix1D)
     */
    public void updateWeightsScaled(double scalefactor, DoubleMatrix1D delta)
    {
        SeqBlas.seqBlas.daxpy(scalefactor, delta, weights);
    }

    /* (non-Javadoc)
     * @see org.hswgt.teachingbox.feature.FeatureFunctionObserver#updateFeatureVectorSize(int)
     */
    public void updateFeatureVectorSize(int newSize)
    {
        // This function does nothing because updateFeatureAdded and
        // updateFeatureRemoved take care of resizing the weights vector.
    }

    public void updateFeatureAdded(int index) {
        DoubleMatrix1D newWeights = weights.like(
                featureFunction.getFeatureVectorSize());

        // feature added to the end of the featureVector
        if (index + 1 == newWeights.size()) {
            newWeights.viewPart(0, index).assign(weights);
        }
        // feature added to the beginning of the featureVector
        else if(index == 0) {
            newWeights.viewPart(1, newWeights.size()-1).assign(weights);
        }
        // feature added somewhere inside the feature vector
        else {
            // copy old values to the corresponding indexes
            newWeights.viewPart(0, index).assign(weights.viewPart(0, index));
            newWeights.viewPart(index+1, newWeights.size()-(index+1)).assign(
                    weights.viewPart(index, weights.size()-index));
        }

        this.weights = newWeights;
    }

    public void updateFeatureRemoved(int index) {
        DoubleMatrix1D newWeights = this.weights.like(
                featureFunction.getFeatureVectorSize());

        // feature removed from the end of the featureVector
        if (index == newWeights.size()) {
            newWeights.assign(weights.viewPart(0, index));
        }
        // feature removed from the beginning of the featureVector
        else if(index == 0) {
            newWeights.assign(weights.viewPart(1, weights.size()-1));
        }
        // feature removed somewhere inside the feature vector
        else {
            // copy old values to the corresponding indexes
            newWeights.viewPart(0, index).assign(weights.viewPart(0, index));
            newWeights.viewPart(index, newWeights.size()-index).assign(
                    weights.viewPart(index+1, weights.size()-(index+1)));
        }
        this.weights = newWeights;
    }
}
